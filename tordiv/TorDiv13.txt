* imagefan

Computes the coarsest common refinement of the images of all faces/cones
of a cone or fan sigma under a projection Q of lattices. sigma (or the support
of sigma) is assumed to be a not necessarily pointed cone of full dimension.

input:  a fan or a cone,
        a listlist of integers [a matrix]
output: a fan
example:
> sigma := poshull([1,0,0],[0,1,0],[0,1,1],[1,0,1]);  
                             sigma := CONE(3, 3, 0, 4, 4)

> Q := [[1,0],[1,1],[0,2]];
                             Q := [[1, 0], [1, 1], [0, 2]]

> imagefan(sigma, Q);
                                   FAN(2, 0, [0, 3])

* gitlimit

input: a listlist of integers [a matrix, an associated pair],
       optionally a cone.
output: a fan.

* ppdivisor

input:  a listlist of integers [a matrix, an associated pair]
output: a fan,
        a polyhedral divisor
example:

> Q := [[1],[1]];
                                    Q := [[1], [1]]

> ppdivisor(Q);
                            [FAN(1, 0, [2]), POLDIV(1, 1)]

* ppfan

Compute a fan of pp-divisors for a given toric variety X and subtorus
action. If X is affine, the result is guaranteed to be minimal.

input:  a fan or a cone,
        a listlist of integers [a matrix, an associated pair]
output: a fan of a toric variety Y,
        a list of polyhedral divisors giving a divisorial fan on Y
example:

> X := projspace(2);
                                X := FAN(2, 0, [0, 3])

> Q := [[1],[0]];
                                    Q := [[1], [0]]

> ppfan(X,Q);
             [FAN(1, 0, [2]), [POLDIV(1, 1), POLDIV(1, 1), POLDIV(1, 1)]]
        

* slice

Compute a slice of a fan of polyhedral divisors. If the second argument
is a list of pairs [ray, weight], missing rays are assigned the
weight 0.

input:  a list of polyhedral divisors,
        a list of pairs [vector, integer] or a
           function vector -> integer
output: a list of polyhedra
example:

> F := ppfan(projspace(2), [[1],[0]])[2];
                    F := [POLDIV(1, 1), POLDIV(1, 1), POLDIV(1, 1)]

> slice(F, [[[1],1]]);
          [POLYTOPE(1, 0, 1, 1), POLYTOPE(1, 0, 1, 1), POLYTOPE(1, 0, 1, 1)]

> slice(F, x -> 0);
          [POLYTOPE(1, 0, 1, 1), POLYTOPE(1, 0, 1, 1), POLYTOPE(1, 0, 1, 1)]


* base, basedim, tailcone, torusdim, coefficients

Procedures to extract data from the type POLDIV.

input:  a polyhedral divisor
output: base: a fan
        basedim, torusdim: an integer
        tailcone: a cone
        coefficients: a list of pairs [vector, polyhedron]
example:
> P := ppdivisor([[1],[1]])[2];
                                   P := POLDIV(1, 1)

> base(P), basedim(P), tailcone(P), torusdim(P); 
                       FAN(1, 0, [2]), 1, CONE(1, 1, 0, 1, 1), 1

> coefficients(P);
  [[[1], POLYHEDRON(1, 1, 0, [1, 1], [1])], [[-1], POLYHEDRON(1, 1, 0, [1, 1], [1])]]

