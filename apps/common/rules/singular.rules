
CREDIT Singular
  blaaaa

# path to the root installation directory of libsingular
custom $singular_path;

CONFIGURE_BUILD {
  find_location($singular_path, "/usr", "/usr/local", "/opt", 
                { prompt => "libsingular root installation directory",
                  check => sub { !-f "$_[0]/include/libsingular.h" && "$_[0]/include/libsingular.h does not exist"
                           } })
    or return;

  return ( SingularPath   => $singular_path );
}

declare property_type SingularIdeal : c++ (include => ["polymake/common/singular.h"]) {
#property_type SingularIdeal {

   method construct(Array<Polynomial>) : c++;
   
   method std(Ring) : void : c++ ;

   method radical(Ring) : c++ ;

   method polynomials(Ring) : c++;

}

object Ideal {

   property SINGULAR_IDEAL : SingularIdeal;

   rule SINGULAR_IDEAL : GENERATORS {
      $this->SINGULAR_IDEAL = new SingularIdeal($this->GENERATORS);
   }
   precondition : !ZERO;

   rule STANDARD : SINGULAR_IDEAL, RING {
      $this->SINGULAR_IDEAL->std($this->RING);
      $this->STANDARD = $this->SINGULAR_IDEAL->polynomials($this->RING);
   }

   rule RADICAL : SINGULAR_IDEAL, RING {
      my $si = $this->SINGULAR_IDEAL->radical($this->RING);
      $this->RADICAL = new Ideal(GENERATORS=>$si->polynomials($this->RING));
      #$this->SINGULAR_IDEAL->radical($this->RING);
   }
}

