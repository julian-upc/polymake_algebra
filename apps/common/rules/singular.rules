#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_algebra/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_algebra
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.


CREDIT Singular
  blaaaa

# path to the root installation directory of libsingular
custom $singular_path;

CONFIGURE_BUILD {
  find_location($singular_path, "/usr", "/usr/local", "/opt", 
                { prompt => "libsingular root installation directory",
                  check => sub { !-f "$_[0]/include/libsingular.h" && "$_[0]/include/libsingular.h does not exist"
                           } })
    or return;

  return ( SingularPath   => $singular_path );
}

declare property_type SingularIdeal : c++ (include => ["polymake/common/singular.h"]) {
#property_type SingularIdeal {

   method construct(Array<Polynomial>) : c++;
   
   method std(Ring) : void : c++ ;
   
   method dim(Ring) : c++ ;

   method radical(Ring) : c++ ;

   method polynomials(Ring) : c++;

}

object Ideal {

   property SINGULAR_IDEAL : SingularIdeal;

   rule SINGULAR_IDEAL : GROEBNER.GROEBNER_BASIS | GENERATORS {
      $this->SINGULAR_IDEAL = new SingularIdeal($this->GROEBNER->GROEBNER_BASIS | GENERATORS);
   }
   precondition : !ZERO;

   rule DIM : GROEBNER.GROEBNER_BASIS, SINGULAR_IDEAL, RING {
      $this->DIM = $this->SINGULAR_IDEAL->dim($this->RING);
   }

   rule GROEBNER.GROEBNER_BASIS : SINGULAR_IDEAL, RING {
      $this->SINGULAR_IDEAL->std($this->RING);
      $this->GROEBNER->GROEBNER_BASIS = $this->SINGULAR_IDEAL->polynomials($this->RING);
   }

   rule RADICAL : SINGULAR_IDEAL, RING {
      my $si = $this->SINGULAR_IDEAL->radical($this->RING);
      $this->RADICAL = new Ideal(GENERATORS=>$si->polynomials($this->RING));
   }
}

