#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_algebra/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_algebra
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

# FIXME: Template parameters for coefficients and exponents.
# TODO: Move to kernel (mtk).
object Ideal {

	property DEPTH : Int;

	property DIM : Int;
	
   # TODO: mtk.
	property GENERATORS : Array<Polynomial>;
	
	property HILBERT_POLYNOMIAL : Polynomial;

	property HOMOGENEOUS : Bool;

	property PRIME : Bool;

	property PRIMARY : Bool;

	property PRIMARY_DECOMPOSITION : Ideal : multiple;

	property RADICAL : Ideal;

   # TODO: mtk.
	property RING : Ring;

   # TODO: mtk.
	property STANDARD : Array<Polynomial>;

   # TODO: mtk.
	property ZERO : Bool;

	user_method HOMOGENIZE {
		my ($this, $var) = @_;
      die "no implemented yet";
		my $i = new Ideal();

		return $i;
	}

	user_method CONTAINS {
		my ($this, $poly) = @_;

		return 1;
	}

	rule PRIMARY : {
		$this->PRIMARY = 1;
	}
	precondition : PRIME;


	rule PRIMARY : RADICAL.PRIME {
		$this->PRIMARY = $this->RADICAL->PRIME;
	}

	rule ZERO : STANDARD | GENERATORS {
      my $gens = $this->STANDARD | GENERATORS;
		if($gens->size != 0){
			foreach my $p (@{$gens}){
				if(!$p->trivial){
					$this->ZERO = 0;
					return;
				}
			}
		} 
		$this->ZERO = 1;
	}

	rule RING : STANDARD | GENERATORS {
      my $gens = $this->STANDARD | GENERATORS;
		$this->RING = $gens->[0]->get_ring;
	}
	precondition : !ZERO;

}

