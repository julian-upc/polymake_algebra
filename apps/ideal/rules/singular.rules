#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_algebra/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_algebra
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.


CREDIT Singular
  blaaaa

# path to the root installation directory of libsingular
custom $singular_path;

CONFIGURE_BUILD {
  find_location($singular_path, "/usr", "/usr/local", "/opt", 
                { prompt => "libsingular root installation directory",
                  check => sub { !-f "$_[0]/include/libsingular.h" && "$_[0]/include/libsingular.h does not exist"
                           } })
    or return;

  return ( SingularPath   => $singular_path );
}

object Groebner {

   declare property_type SingularIdeal : c++ (include => ["polymake/ideal/singular.h"]) {

      method construct(Array<Polynomial>, Matrix<Int>) : c++;
      
      method groebner() : void : c++ ;
      
      method dim() : c++ ;

      method radical() : c++ ;

      method polynomials(Ring) : c++;

   }

   property SINGULAR_IDEAL : SingularIdeal;

}

object Ideal {

   rule GROEBNER.GROEBNER_BASIS, GROEBNER.SINGULAR_IDEAL : GENERATORS, GROEBNER.MONOMIAL_ORDERING , RING {
      $this->GROEBNER->SINGULAR_IDEAL = new SingularIdeal($this->GENERATORS, $this->GROEBNER->MONOMIAL_ORDERING);
      $this->GROEBNER->SINGULAR_IDEAL->groebner();
      $this->GROEBNER->GROEBNER_BASIS = $this->GROEBNER->SINGULAR_IDEAL->polynomials($this->RING);
   }
   precondition : !ZERO;

   
   rule GROEBNER.SINGULAR_IDEAL : GROEBNER.GROEBNER_BASIS , GROEBNER.MONOMIAL_ORDERING {
      $this->GROEBNER->SINGULAR_IDEAL = new SingularIdeal($this->GENERATORS, $this->GROEBNER->MONOMIAL_ORDERING);
   }

   rule DIM : GROEBNER.SINGULAR_IDEAL {
      $this->DIM = $this->GROEBNER->SINGULAR_IDEAL->dim();
   }


   rule RADICAL : RING {
      my $si;
      unless (defined($si = $this->lookup("GROEBNER.SINGULAR_IDEAL"))) {
         warn "using temporary GROEBNER object with default ordering";
         $si = $this->GROEBNER(MONOMIAL_ORDERING=>unit_matrix($this->RING->names->size),temporary)->SINGULAR_IDEAL; #FIXME ordering
      }
      my $radical = $si->radical();
      $this->RADICAL = new Ideal(GENERATORS=>$radical->polynomials($this->RING),RING=>$this->RING);
   }
}
