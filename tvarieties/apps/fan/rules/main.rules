

CREDIT gfan
  Gfan is a software package for computing Groebner fans and tropical varieties.
  Copyright by Anders Jensen
  http://www.math.tu-berlin.de/~jensen/software/gfan/gfan.html

# path to gfan
custom $gfan_tropicalhypersurface;

custom $gfan_tropicalbruteforce;

CONFIGURE {
    find_program($gfan_tropicalhypersurface, "gfan_tropicalhypersurface");
    find_program($gfan_tropicalbruteforce, "gfan_tropicalbruteforce");
}


#######################################
#######################################
###
### Toric Variety
###
#######################################
#######################################

declare object ToricVariety<Scalar=Rational [ typechecks::is_ordered_field(Scalar) ]> : PolyhedralFan<Scalar>; 

object PolyhedralFan<Rational> {

	auto_cast : ToricVariety<Rational>;

}

object ToricVariety {

	# Properties:

	property AFFINE : Bool;

	property PROJECTIVE : Bool;

	property SMOOTH = override SMOOTH_FAN;
	
	# Rules:

	rule PROJECTIVE : MAXIMAL_CONES {
		$this->PROJECTIVE = 1;
	}
	
}

#######################################
#######################################
###
### Hypersurface in Toric Variety
###
#######################################
#######################################

declare object HypersurfaceInTV;

object HypersurfaceInTV {

	# Properties:
	
	property AMBIENT_TV : ToricVariety;
	
	property EQUATION : Polynomial;
	
	property RELEVANT_CONES : PolyhedralFan;

	property TROPICAL_FAN : PolyhedralFan;
	
	
	# Rules:
	
	rule RELEVANT_CONES : TROPICAL_FAN, AMBIENT_TV{
		my $TV = $this->AMBIENT_TV;
		my $trop = $this->TROPICAL_FAN;
		my @interesting_cones = map($trop->cone($_),0..($trop->N_MAXIMAL_CONES-1));
		# print "bla\n";	

		my @relevant = ();
		my $tvmc = $TV->MAXIMAL_CONES;
		my $tvr = new Matrix<Rational>($TV->RAYS);
		#print $tvr;
		foreach my $C (@$tvmc) {
			#print $C;
			my $m = new Matrix<Rational>(@$tvr[@$C]);
			#print $m;
			my $A = new Cone<Rational>(INPUT_RAYS=>$m);
			foreach my $t (@interesting_cones){
				my $tA = intersection($t, $A);
				if($tA->CONE_DIM < $t->CONE_DIM){
					#print "dim too low\n";
					next;
				} else {
					#print "maybe ok\n";
					my $tar = $tA->RAYS;
					my $one = ones_vector($tar->rows);
					my $interior_point = transpose($tar) * $one;
					my $fac = $A->FACETS;
					# print "\n\nFacets:\n$fac\n";
					my @equations = grep($_*$interior_point == 0, @$fac);
					my $eq_mat = new Matrix<Rational>(@equations);
					# print "Equations:\n$eq_mat\n";
					# print "IP: $interior_point\n";
					my $test = $eq_mat->rows;
					if($test == 0){
						# print "ok\n";
						push @relevant, $C;
					} else {
						my $zero = zero_vector<Rational>($test);
						my @good_rays = grep($eq_mat * $tvr->[$_] == $zero, @$C);
						# print "good rays: @good_rays\n";
						push @relevant, new Set<Integer>(@good_rays);
					}
					last;
				}
			}
			#print "la\n";	
		}
		$this->RELEVANT_CONES = check_fan($tvr, new Array< Set<Integer>>(@relevant));
	}


	rule TROPICAL_FAN : EQUATION {
		$this->TROPICAL_FAN = gfan_tropicalhypersurface($this->EQUATION);
	}

	

}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
sub gfan_tropicalbruteforce {
	my ($coefficients, $exponents) = @_;
	my $tempfile=new Tempfile;
	#my $tempfile="test";
	
	# Homogenizing polynomial and preparing to write to file:	
	my $nvars = $exponents->cols();
	my @vars = ( "t" , map { "x$_" } (1..$nvars) );
	my $one = ones_vector<Int>($nvars);
	my $degrees = $exponents*$one;
	my $homog = new Matrix<Int>[[map{maximum($degrees)-$degrees->[$_]} (0..($exponents->rows()-1))]];
	print $homog;
	my $newexp = transpose($homog)|$exponents;
	my $R = new Ring(@vars);
	my $p = new Polynomial($newexp,$coefficients,$R); 
	
	# Writing data to file:
	open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
	print $input "Q[";
	print $input join(",",$R->variables);
	print $input "]{\n";
	print $input $p;
	print $input "\n}";
	print $tempfile;
	close $input;
	
	# Accessing gfan:
	system "$gfan_tropicalbruteforce --xml <$tempfile.in >$tempfile.poly 2>/dev/null";
	
	my $gfan_out= User::load("$tempfile.poly");
	return $gfan_out;
}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
sub gfan_tropicalhypersurface {
	my ($g) = @_;
	my $tempfile=new Tempfile;
	#my $tempfile="test";
	
	# Homogenizing polynomial and preparing to write to file:	
	my $R = $g->get_ring;
	
	# Writing data to file:
	open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
	print $input "Q[";
	print $input join(",",$R->variables);
	print $input "]{\n";
	print $input $g;
	print $input "\n}";
	print $tempfile;
	close $input;
	
	# print "$gfan_tropicalhypersurface\nlala\n$gfan_tropicalbruteforce\nlala\n";
	# Accessing gfan:
	system "$gfan_tropicalhypersurface --xml <$tempfile.in >$tempfile.poly 2>/dev/null";
	
	my $gfan_out= User::load("$tempfile.poly");
	return check_fan(-$gfan_out->RAYS, $gfan_out->MAXIMAL_CONES);
}

user_function add_ray(PolyhedralFan, Vector){
	my($fan, $ray) = @_;
	my $oldrays = $fan->RAYS;
	my $newrays = $oldrays / $ray;
	print $newrays;
	my $mc = $fan->MAXIMAL_CONES;
	for my $f (@$mc) {
		print "$f\n";
		my $gens = new Matrix<Rational>(@$oldrays[@$f]);
		print $gens;	
	}	
}

user_function cocoref_bruteforce(Matrix) {
	my($rays) = @_;
	my $dim = $rays->cols();
	my $m = $rays->rows();
	my @init_cones = all_subsets_of_k($dim, 0..($m)-1);
	@init_cones = map(new Set($_), @init_cones);
	print @init_cones;
	my @new_cones = ();
	foreach my $c (@init_cones){
		my $A = new Matrix<Rational>(@$rays[@$c]);
		if(rank($A)==$dim){
			my $iA = inv($A);
			my $eval = $rays * $iA;
			my $v = new Vector<Rational>(map(minimum($_), @$eval));
			#print $v;
			my $contained_rays = 0;
			map($_>=0?$contained_rays++:0, @$v);
			#print "$contained_rays\n";
			if($contained_rays == $dim){
				push @new_cones, new Cone<Rational>(INPUT_RAYS=>$A);
				#print "$c\n";	
			}
		}
	}

	# Refinement procedure:
	my $repeat = 1;
	my $num = 0;
	my @old_cones = @new_cones;
	my @collected = @new_cones;
	my $in = @old_cones;
	print "old: $in\n";
	while ($repeat == 1) {
		$repeat =0;
		my @toadd = ();
		foreach my $A (@old_cones){
			foreach my $B (@new_cones){
				if(!included_polyhedra($A, $B) && !included_polyhedra($B, $A)){
					my $AB = intersection($A, $B);
					if ($AB->DIM == $dim){
						my $isnew = 1;
						foreach my $C (@collected,@toadd){
							if(equal_polyhedra($AB, $C)){
								$isnew = 0;
								last;
							}
						}
						if($isnew == 1){
							$repeat = 1;
							push @toadd, $AB;
						}
					}
				}
			}
			my $s = @toadd;
			print "$s\n";
		}
		if($repeat == 1){
			@new_cones = @toadd;
			@collected = (@collected, @toadd);
			my $s = @collected;
			print "size: $s\n";
		}
	}

	# Removing superflous cones:
	my @keep = ();
	foreach my $A (@collected){
		my $check = 1;
		foreach my $B (@collected){
			if(included_polyhedra($B, $A) && !equal_polyhedra($A, $B)){
				$check = 0;
				last;
			}
		}
		if($check == 1){
			push @keep, $A;
		}
	}
	
	$in = @keep;
	print "Number of resulting cones: $in.\n";
	
	my @rays = ();
	#print @keep;
	foreach my $C (@keep){
		my $r = new Matrix<Rational>($C->RAYS);
		@rays = (@rays, map(primitive($_), @$r));
	}
	#print @rays;
	my $ray_set = new Set<Vector>(@rays);
	#print $ray_set;
	
	my @gens = @$ray_set;
	my $gs = @gens;
	my $rays = new Matrix<Rational>(@gens);
	#print $rays;
	my $ray_map = new Map<Vector, Int>;
	map($ray_map->{$gens[$_]}=$_, 0..($gs-1));
	my @max_cones;
	foreach my $C (@keep){
		my $r = new Matrix<Rational>($C->RAYS);
		my @mc = map($ray_map->{primitive($_)}, @$r);
		push @max_cones, new Set<Integer>(@mc);
	}
	print "Generating rays:\n";
	print $rays;
	print "\nMaximal cones:\n";
	print "@max_cones\n";
	return check_fan($rays, new Array< Set<Integer>>(@max_cones));
}

sub homogenize { 
	my ($in) = @_;
	
}

sub gale_dual{
	# TODO
	return 0;
}

user_function chow_quotient(Polynomial){
	my ($g) = @_;
	print "Defining Polynomial:\n$g\n\n";
	my $degs = dense($g->monomials_as_matrix);
	print "Exponents:\n$degs\n";
	my $coeffs = $g->coefficients_as_vector;
	print "Coefficients:\n$coeffs\n\n";
	my @r = @$degs;
	my $c = $r[0];
	#print $c;
	my @diffmatrows  = map($_-$c, @r);
	my $diffmat = new Matrix<Integer>(@diffmatrows);
	print "Pairwise differences:\n$diffmat\n";
	my $D = null_space($diffmat);
	print "D:\n$D\n";
	my $B = transpose(null_space($D));
	print "B:\n$B\n";
	print $D*$B;
	my $deg_g = $D*$c;
	print "degree of g:\n$deg_g\n\n";
	print $D*transpose($degs);
	my $dm1 = new Polytope<Rational>(EQUATIONS=>(-$deg_g | $D));
	my $a = $dm1->DIM;
	print "Dim:\n$a\n";
	my $zero = zero_vector($B->cols);
	my @fm = map(((ones_vector(1) | new Vector<Rational>($_))/($zero | transpose(new Matrix<Rational>($B)))), @$degs);
	@fm = map((new Polytope<Rational>(POINTS=>$_)), @fm);
	my $good_points = $dm1;
	foreach my $P (@fm){
		$good_points = intersection($good_points, $P);
	}
	my $cv = cube($D->cols)->VERTICES;
	print $cv;
	my $test = 0;
	my $t = 1;
	print $good_points->VERTICES;
	while($test == 0){
		my $vert = $t * $cv;
		print $vert->[0];
		my $cube = new Polytope<Rational>(POINTS=>$vert);
		print $cube->VERTICES->[0];
		my $inter = intersection($cube, $good_points);
		my $lat = $inter->LATTICE_POINTS;
		print $cube->AMBIENT_DIM;
		print $inter->AMBIENT_DIM;
		print $good_points->AMBIENT_DIM;
		print $lat;
		my $test = $lat->rows;
		if($test > 0){
			$good_points = $inter;
		}
		$t++;
		undef $cube;
		print "$t\n";
	}
	return $good_points;
}
