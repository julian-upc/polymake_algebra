IMPORT polytope

# Is the following line neccessary?
IMPORT common


CREDIT gfan
  Gfan is a software package for computing Groebner fans and tropical varieties.
  Copyright by Anders Jensen
  http://www.math.tu-berlin.de/~jensen/software/gfan/gfan.html

# path to gfan
custom $gfan_tropicalbruteforce;

CONFIGURE {
    find_program($gfan_tropicalbruteforce, "gfan_tropicalbruteforce");
}


#######################################
#######################################
###
### Toric Variety
###
#######################################
#######################################

declare object ToricVariety<Scalar=Rational [ typechecks::is_ordered_field(Scalar) ]> : PolyhedralFan<Scalar>; 

object PolyhedralFan<Rational> {

	auto_cast : ToricVariety<Rational>;

}

object ToricVariety {

	# Properties:

	property AFFINE : Bool;

	property PROJECTIVE : Bool;

	property SMOOTH = override SMOOTH_FAN;
	
	# Rules:

	rule PROJECTIVE : MAXIMAL_CONES {
		$this->PROJECTIVE = 1;
	}
	
}

#######################################
#######################################
###
### Hypersurface in Toric Variety
###
#######################################
#######################################

declare object HypersurfaceInTV;

object HypersurfaceInTV {

	# Properties:
	
	property EQUATION : Polynomial;

	property EXPONENTS : Matrix<Int>;

	property COEFFICIENTS : Vector<Rational>;

	property TROPICAL : TropicalVariety;

	property TROPICAL_FAN : PolyhedralFan;
	
	# Rules:
	
	# It would be nice to have the opposite rules as well. TODO
	rule EQUATION : EXPONENTS, COEFFICIENTS {
		my $nvars = $this->EXPONENTS->cols();
        	my @vars = (map { "x$_" } (1..$nvars) );
        	my $R = new Ring(@vars);
        	$this->EQUATION = new Polynomial($this->EXPONENTS,$this->COEFFICIENTS,$R);
	}
	
	# Note that this method first homogenizes the input polynome
	# and that the output fan is not 'dehomogenized', yet. Also this
	# is only right up to sign, i.e. min or max in the tropical
	# language. I think for the Sturmfels/Maclagan Theorem to hold
	# the sign has to be changed.
	rule TROPICAL_FAN : EXPONENTS, COEFFICIENTS {
		$this->TROPICAL_FAN = gfan_tropicalbruteforce($this->COEFFICIENTS, $this->EXPONENTS);
	}

}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
sub gfan_tropicalbruteforce {
	my ($coefficients, $exponents) = @_;
	my $tempfile=new Tempfile;
	#my $tempfile="test";
	
	# Homogenizing polynomial and preparing to write to file:	
	my $nvars = $exponents->cols();
	my @vars = ( "t" , map { "x$_" } (1..$nvars) );
	my $one = ones_vector<Int>($nvars);
	my $degrees = $exponents*$one;
	my $homog = new Matrix<Int>[[map{maximum($degrees)-$degrees->[$_]} (0..($exponents->rows()-1))]];
	print $homog;
	my $newexp = transpose($homog)|$exponents;
	my $R = new Ring(@vars);
	my $p = new Polynomial($newexp,$coefficients,$R); 
	
	# Writing data to file:
	open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
	print $input "Q[";
	print $input join(",",$R->variables);
	print $input "]{\n";
	print $input $p;
	print $input "\n}";
	print $tempfile;
	close $input;
	
	# Accessing gfan:
	system "$gfan_tropicalbruteforce --xml <$tempfile.in >$tempfile.poly 2>/dev/null";
	
	my $gfan_out= User::load("$tempfile.poly");
	return $gfan_out;
}


user_function add_ray(PolyhedralFan, Vector){
	my($fan, $ray) = @_;
	my $oldrays = $fan->RAYS;
	my $newrays = $oldrays / $ray;
	print $newrays;
	my $mc = $fan->MAXIMAL_CONES;
	for my $f (@$mc) {
		print "$f\n";
		my $gens = new Matrix<Rational>(@$oldrays[@$f]);
		print $gens;	
	}	
}

sub homogenize { 
	my ($in) = @_;
	
}

sub gale_dual{
	# TODO
	return 0;
}
