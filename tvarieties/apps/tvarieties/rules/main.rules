
IMPORT common

IMPORT polytope

# Might need some other name.
declare object Variety {
	
	property BASERING : Ring;

	#property COEFFICIENTS : Array<Polynomial>; # This might be done different...

	property IS_PROJECTIVE : Bool;

}

declare object PrimeDivisor {
	
	property name : String;

}

declare object Divisor {
	
	property IS_SEMI_AMPLE : Bool;

	property IS_BIG : Bool;

	property IS_AMPLE : Bool;

	# property SUMMANDS : Array<PrimeDivisor>; #This should be fixed.

	property COEFFICIENTS : Vector<Rational>;	
}

declare object PolyhedralPrimeDivisor : PrimeDivisor {

	property COEFFICIENT : polytope::Polytope;

}

declare object PolyhedralDivisor ;

declare object PDivisor : PolyhedralDivisor {
	
	
	
}

object PolyhedralDivisor {

	#property SUMMANDS : Array<PolyhedralPrimeDivisor>;

	property IS_P_DIVISOR : Bool;
	
	auto_cast : PDivisor;
	precondition : IS_P_DIVISOR;

	#user_method EVALUATE {
		#my($PD, $c) = @_;
		#my (@summands, @coeffs);
		#foreach $s (@{$PD->SUMMANDS}){
			#$s->COEFFICIENT->LP = new LinearProgram<Rational>(LINEAR_OBJECTIVE=>$c);
			#$mv = $s->COEFFICIENT->LP->MINIMAL_VALUE;
			#push @coeffs, $mv;
			#push @summands, new PrimeDivisor($s);
		#}
		#return new Divisor(SUMMANDS=>new Array<PrimeDivisor>(@summands),COEFFICIENTS=>new Vector<Rational>(@mv));
	#}
}


declare object AffineTVariety {
	
	property P_DIVISOR : PDivisor;

	#property GENERATORS : Array<Polynomial>;

	#rule GENERATORS : P_DIVISOR {
		#TODO
	#}

}
